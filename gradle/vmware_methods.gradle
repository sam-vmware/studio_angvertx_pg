/**
 * Created by samueldoyle
 * For some methods to be used during the build process
 * TODO: ATM this adds closures to the VMWARE_CONF properties should be a plugin or something for utility methods, change later
 */
apply plugin: 'java'
apply plugin: 'groovy'

import groovy.beans.Bindable
import groovy.swing.SwingBuilder
import java.awt.*
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.codehaus.groovy:groovy-all:$groovyVersion"
        classpath "com.google.guava:guava:$guavaVersion"
        classpath "org.apache.commons:commons-lang3:$commonsLangVersion"
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
}

@Bindable
public class AppProperties {
    String modOwner, modName
    boolean doBuild = false

    String toString() { "app[modOwner=$modOwner,modName=$modName,doBuild=$doBuild]" }
}

/**
 * Collects user input via swing dialog for scaffold app
 * @param app
 */
VMWARE_CONF.promptNewAppProperties = {

    def returnValues = [:]
    def modFieldConverter = { modField ->
        modField.toLowerCase()
    }

    def modFieldValidator = { modField ->
        modField ==~ /.*?[\.a-zA-Z].*?/
    }

    def app = new AppProperties(modOwner: 'mycompany', modName: 'my-test-service')
    new SwingBuilder().edt {

        dialog(modal: true,
            title: "Project Properties",
            alwaysOnTop: true,
            resizable: true, // Don't allow the user to resize the dialog
            locationRelativeTo: null, // Place dialog in center of the screen
            pack: true, // We need to pack the dialog (so it will take the size of it's children)
            show: true // Let's show it
        ) {
            borderLayout(vgap: 5)
            panel(constraints: BorderLayout.CENTER,
                border: compoundBorder([emptyBorder(10), titledBorder("Enter New Application Properties:")])) {
                tableLayout {
                    tr {
                        td {
                            label "Mod Owner ('com.' will be prefixed):"
                        }
                        td {
                            textField id: "modOwnerField", columns: 20, text:bind(
                                validator: modFieldValidator,
                                converter: modFieldConverter,
                                target:app, targetProperty:'modOwner'
                            )
                        }
                    }
                    tr {
                        td {
                            label "Mod Name:"
                        }
                        td {
                            textField id: "modNameField", columns: 20, text:bind(
                                validator: modFieldValidator,
                                converter: modFieldConverter,
                                target:app, targetProperty:'modName'
                            )
                        }
                    }
                }
            }

            panel(constraints: BorderLayout.SOUTH) {
                button text: "Build", actionPerformed: {
                    returnValues.doBuild = true
                    returnValues.modOwner = "com.${app.modOwner}"
                    returnValues.modName = app.modName
                    dispose()
                }
                button text: "Cancel", actionPerformed: {
                    dispose()
                }
            }
        }
    }

    returnValues
}

/**
 * Generates a target dir for output, simply increments a number to add to the outputdir if it exists already
 * @param genDirBase - the base dir to check and increment if exists e.g. /tmp/foo-bar-service
 * @return - A file representing the chosen directory
 */
VMWARE_CONF.genAppOutDir = { genDirBase ->
    def genDirInc = -1, targetOutDir, first = true
    while (true) {
        if (first) {
            targetOutDir = "$genDirBase"
        } else {
            targetOutDir = "$genDirBase.$genDirInc"
        }
        if (new File(targetOutDir).exists()) {
            genDirInc++
            continue
        }
        break
    }

    targetOutDir
}

def createDirs = { File targetDirs ->
    println "DEBUG: Making dirs: ${targetDirs.absolutePath}"
    if (targetDirs.exists()) {
        println "DEBUG: ${targetDirs.absolutePath} exists already"
    } else if (!targetDirs.mkdirs()) {
        throw new StopActionException("Failed to created dirs: ${targetDirs.absolutePath}")
    }
}

/**
 * Outputs a scaffolded app based on provided properties
 * @param props - required properties to output the scaffold
 */
VMWARE_CONF.scaffoldApp = { props ->

    def opts = [
        scaffoldSvcDir:"${props.scaffoldDir}/scaffold-service",
        scaffoldRscDir:"${props.scaffoldDir}/scaffold-artifacts/scaffold-resources",
        scaffoldSrcDir:"${props.scaffoldDir}/scaffold-artifacts/scaffold-src",
        groovySrcOut:"${props.replaceTokens.modOwner.replaceAll(/\./, "/")}",
        targetOutDir:new File(props.targetOutDir)
    ]
    opts << [
        scaffoldGroovySrcDir:"${opts.scaffoldSrcDir}/groovy",
        webUiDir:"${opts.targetOutDir.absolutePath}/web-ui",
        appDir:"${opts.targetOutDir.absolutePath}/web-ui/app",
        modDir:"${opts.targetOutDir.absolutePath}/web-ui/app/modules",
        srcDir:"${opts.targetOutDir.absolutePath}/src",
        groovyDir:"${opts.targetOutDir.absolutePath}/src/main/groovy",
        resourceDir:"${opts.targetOutDir.absolutePath}/src/main/resources",
    ]
    opts << [
        groovySrcDirs:new File("${opts.groovyDir}/${opts.groovySrcOut}"),
        scaffModDir:new File(opts.modDir, props.replaceTokens.modName)
    ]
    opts << [
        groovyHelpersDirs:new File(opts.groovySrcDirs, "helpers")
    ]

    println "\n==== DEBUG: Using options ====\n"
    opts.sort{it.key}.each{ k,v ->
        println "$k : $v"
    }
    println "\n=============================\n"

    // Create Dirs
    createDirs(opts.targetOutDir)
    createDirs(opts.scaffModDir)
    ["controllers", "services", "views"].each { String dir ->
        createDirs(new File(opts.scaffModDir, dir))
    }
    createDirs(opts.groovySrcDirs)
    createDirs(opts.groovyHelpersDirs)

    // Copy
    println "DEBUG: Copy ${opts.scaffoldSvcDir} --> ${opts.targetOutDir.absolutePath}"
    copy {
        from(opts.scaffoldSvcDir) {
            exclude "**/gradle.properties", "**/mod.json", "**/vertx_classpath.txt"
        }
        from(opts.scaffoldSvcDir) {
            include "**/gradle.properties", "**/mod.json", "**/vertx_classpath.txt"
            filter(ReplaceTokens, tokens: props.replaceTokens)
        }
        into opts.targetOutDir.absolutePath
        includeEmptyDirs = true
    }

    println "DEBUG: Copy ${opts.scaffoldRscDir} --> ${opts.scaffModDir.absolutePath}"
    copy {
        from(opts.scaffoldRscDir) {
            exclude "**/index.html"
            rename { String fileName ->
                fileName.replace("scaffold", props.replaceTokens.modName)
            }
            filter(ReplaceTokens, tokens: props.replaceTokens)
        }
        into opts.scaffModDir.absolutePath
        includeEmptyDirs = true
    }

    println "DEBUG: Copy ${opts.scaffoldRscDir}/index.html --> ${opts.appDir}"
    copy {
        from "${opts.scaffoldRscDir}/index.html"
        filter(ReplaceTokens, tokens: props.replaceTokens)
        into opts.appDir
    }

    println "DEBUG: Copy ${opts.scaffoldGroovySrcDir} --> ${opts.groovySrcDirs.absolutePath}"
    copy {
        from(opts.scaffoldGroovySrcDir) {
            rename { String fileName ->
                fileName.replace("Scaffold", props.serviceBaseName)
            }
            filter(ReplaceTokens, tokens: props.replaceTokens)
        }
        into opts.groovySrcDirs.absolutePath
        includeEmptyDirs = true
    }

    // symlink resource/app to web-ui/app
    println "DEBUG: linking from $opts.resourceDir to ../../../web-ui/app"
    exec {
        workingDir opts.resourceDir
        commandLine 'ln', '-s', '../../../web-ui/app'
        ignoreExitValue true
    }

    println "INFO: App Generated --> ${opts.targetOutDir.absolutePath}"
}
